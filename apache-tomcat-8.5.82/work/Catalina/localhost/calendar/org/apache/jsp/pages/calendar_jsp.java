/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.82
 * Generated at: 2022-08-26 13:38:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import com.nima.calendar.util.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.nima.calendar.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".dateBanner { font-size: 12px; font-family: Tahoma; color: #FFFFFF; background-color: #FFFFFF; }\r\n");
      out.write(".CurrentDay { font-family: Tahoma; font-size: 14px; color: #000066; background-color:#AFBEDA; }\r\n");
      out.write(".GeneralDay { font-size: 12px; font-family: \"Tahoma\"; color: #FBFAC4; background-color: #3C5267; }\r\n");
      out.write("\r\n");
      out.write("a {\r\n");
      out.write("color: #ffffff;\r\n");
      out.write("text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("a:hover {\r\n");
      out.write("text-decoration: underline;\r\n");
      out.write("}\r\n");
      out.write("body {\r\n");
      out.write("background-color: #FFFFFF;\r\n");
      out.write("border: 0;\r\n");
      out.write("margin: 0;\r\n");
      out.write("padding: 0;\r\n");
      out.write("text-align: center;\r\n");
      out.write("font-family: Tahoma, Arial;\r\n");
      out.write("font-size: 76%;\r\n");
      out.write("}\r\n");
      out.write("body * { font-size: 1em; }\r\n");
      out.write(".font-xx-small { font-size: 0.7em; }\r\n");
      out.write(".font-x-small { font-size: 0.8em; }\r\n");
      out.write(".font-small { font-size: 0.9em; }\r\n");
      out.write(".font-large { font-size: 1.1em; }\r\n");
      out.write(".font-x-large { font-size: 1.2em; }\r\n");
      out.write(".font-xx-large { font-size: 1.3em; }\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");

    String currentYear = (String) request.getAttribute("currentYear");
    String currentMonth = (String) request.getAttribute("currentMonth");
    String currentDay = (String) request.getAttribute("currentDay");

    int cm = Integer.parseInt(currentMonth);
    int nm = cm + 1;
    if (nm > 11) {
        nm = 0;
    }

    String nextMonth = Integer.toString(nm);
    String nmurl = "persianCalendar.do?currentMonth=" + nextMonth + "&currentDay=" + currentDay;

    int pm = cm - 1;
    if (pm < 0) {
        pm = 11;
    }
    String previouseMonth = Integer.toString(pm);
    String pmurl = "persianCalendar.do?currentMonth=" + previouseMonth + "&currentDay=" + currentDay;

    String currentMonthName = SimplePersianCalendar.getPersianMonthName(Integer.parseInt(currentMonth));

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <table width=\"204\" border=\"0\" align=\"left\" cellpadding=\"0\" cellspacing=\"0\">\r\n");
      out.write("      <tr>\r\n");
      out.write("        <td width=\"31%\"><table dir=\"ltr\" border=\"0\" width=\"183\" cellspacing=\"0\" cellpadding=\"0\" id=\"table4\" bgcolor=\"#FFFFFF\">\r\n");
      out.write("          <tr>\r\n");
      out.write("            <td width=\"6\" height=\"20\" align=\"center\" bgcolor=\"#FFFFFF\">&nbsp;</td>\r\n");
      out.write("            <td width=\"18\" height=\"20\" align=\"center\"><a href=\"");
      out.print(nmurl);
      out.write("\"><font color=\"#000000\">&lt;</font></a></td>\r\n");
      out.write("            <td width=\"134\" align=\"center\" bgcolor=\"#FFFFFF\" class=\"dateBanner\"><table width=\"70\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n");
      out.write("              <tr>\r\n");
      out.write("                <td><div align=\"center\"><font color=\"#000000\">");
      out.print(currentYear);
      out.write("</font></div></td>\r\n");
      out.write("                <td><div align=\"center\"><font color=\"#000000\">");
      out.print(currentMonthName);
      out.write("</font></div></td>\r\n");
      out.write("                <td><div align=\"center\"><font color=\"#000000\">");
      out.print(currentDay);
      out.write("</font></div></td>\r\n");
      out.write("              </tr>\r\n");
      out.write("            </table></td>\r\n");
      out.write("            <td width=\"18\" align=\"center\"><a href=\"");
      out.print(pmurl);
      out.write("\"><font color=\"#000000\">&gt;</font></a></td>\r\n");
      out.write("            <td width=\"7\" align=\"center\" bgcolor=\"#FFFFFF\">&nbsp;</td>\r\n");
      out.write("          </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("          ");

	   SimplePersianCalendar spc = new SimplePersianCalendar();
	   spc.setDateFields( Integer.parseInt( currentYear ), Integer.parseInt( currentMonth ), 1);
	   DateFields df_spc = spc.getDateFields();
	   int firstDayOfMonth = spc.getPersianDayOfWeek();
	   int dayOfMonthCounter = 7-firstDayOfMonth;
	   int tmpCounter = 0;
	   int dayCounter = 0;
	   int dayContainer = 0;
	   String dayOfMonthStr = "&nbsp;";
	   int numberOfthisMonthDays = SimplePersianCalendar.getPersianDaysOfMonth( df_spc.getMonth(), df_spc.getYear());
	   String DefaultClassStyle = "class=\"GeneralDay\"";
	   String TodayStyleClass = "class=\"CurrentDay\"";
       String style= DefaultClassStyle;

    
      out.write("\r\n");
      out.write("          <table width=\"183\" border=\"0\" align=\"left\" cellpadding=\"0\" cellspacing=\"1\" bgcolor=\"#AFBEDA\" >\r\n");
      out.write("            <tr>\r\n");
      out.write("              <td  width=\"23\" align=\"center\"><font face=\"Tahoma\" size=\"12px\">&#1580;</font></td>\r\n");
      out.write("              <td  width=\"23\" align=\"center\"><font face=\"Tahoma\" size=\"12px\">&#1662;</font></td>\r\n");
      out.write("              <td  width=\"23\" align=\"center\"><font face=\"Tahoma\" size=\"12px\">&#1670;</font></td>\r\n");
      out.write("              <td  width=\"23\" align=\"center\"><font face=\"Tahoma\" size=\"12px\">&#1587;</font></td>\r\n");
      out.write("              <td  width=\"23\" align=\"center\"><font face=\"Tahoma\" size=\"12px\">&#1583;</font></td>\r\n");
      out.write("              <td  width=\"23\" align=\"center\"><font face=\"Tahoma\" size=\"12px\">&#1740;</font></td>\r\n");
      out.write("              <td  width=\"23\" align=\"center\"><font face=\"Tahoma\" size=\"12px\">&#1588;</font></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

         for ( int counter1 = 0; counter1 < 7; counter1++ )
         {
            out.println("<tr align=\"center\" valign=\"middle\" dir=\"rtl\" bgcolor='#FFFFFF'>");

            for ( int counter2 = firstDayOfMonth  ; counter2 < 7; counter2++ )
			{
			   dayCounter = dayOfMonthCounter;
			   dayCounter -= tmpCounter ;
			   dayOfMonthStr = Integer.toString( dayCounter );

			   FarsiDigit fD0 = new FarsiDigit( dayOfMonthStr );
			   String farsiDayOfMonthStr = fD0.convertToUcs2();
               style=DefaultClassStyle;
			   
               String dayurl="persianCalendar.do?currentMonth="+ currentMonth +"&currentDay="+dayOfMonthStr;

               if ( Integer.parseInt( currentDay ) == Integer.parseInt( dayOfMonthStr ) ){
                 style=TodayStyleClass;
                   }
                 out.println("<td width=\"23\" height=\"23\" dir=\"rtl\"" +style+">");
			     
      out.write("\r\n");
      out.write("            <a href=\"");
      out.print(dayurl);
      out.write('"');
      out.write('>');
      out.print(farsiDayOfMonthStr);
      out.write("</a>\r\n");
      out.write("            ");

               out.println("</td>");

			   tmpCounter += 1;
			}
			if ( firstDayOfMonth != 7 )
			  for ( int counter2 = 0; counter2 < firstDayOfMonth; counter2++ )
			     out.println("<td width=\"23\" height=\"23\" dir=\"rtl\"" +DefaultClassStyle+ "> &nbsp; </td>");

			out.println("</tr>");
			dayContainer = dayOfMonthCounter;
			dayOfMonthCounter += 7;
			tmpCounter = 0;
			int diffCounterAndMonthDays = ( dayOfMonthCounter - numberOfthisMonthDays );
			if ( diffCounterAndMonthDays < 0 )
			  diffCounterAndMonthDays *= -1;

			if ( dayOfMonthCounter > 30 )
			{
              if ( diffCounterAndMonthDays < 7 )
			  {
			     for ( int counter3 = 0; counter3 < diffCounterAndMonthDays; counter3++ )
			     {
                   dayOfMonthStr = "&nbsp;";
				   out.println("<td align=\"center\" bgcolor='#FFFFFF' height=\"23\" width=\"23\"" +DefaultClassStyle+ ">" +dayOfMonthStr+ "</td>");
			     }
			     int lastDayOfLastWeek = dayContainer + ( numberOfthisMonthDays - dayContainer );
			     int diffLastToFirst = 7 - ( numberOfthisMonthDays - dayContainer );
			     for ( int counter4 = diffLastToFirst  ; counter4 < 7; counter4++ )
			     {
                   tmpCounter = 1;
                   dayOfMonthStr = Integer.toString( lastDayOfLastWeek );
                   style=DefaultClassStyle;
				   FarsiDigit fD = new FarsiDigit( dayOfMonthStr );
				   String farsiDayOfMonthStr = fD.convertToUcs2();
                   String dayurl2="persianCalendar.do?currentMonth="+ currentMonth +"&currentDay="+dayOfMonthStr;
                   if ( Integer.parseInt( currentDay ) == Integer.parseInt( dayOfMonthStr ) ) {
                    style=TodayStyleClass;
                   }
                     out.println("<td align=\"center\" bgcolor='#FFFFFF' width=\"23\" height=\"23\" dir=\"rtl\"" +style+">");
			          
      out.write("\r\n");
      out.write("            <a href=\"");
      out.print(dayurl2);
      out.write('"');
      out.write('>');
      out.print(farsiDayOfMonthStr);
      out.write("</a>\r\n");
      out.write("            ");

			     out.println("</td>");
			       lastDayOfLastWeek -= tmpCounter ;
			       tmpCounter += 1;
			     }
			  }
			  break;
			}
			else
			  firstDayOfMonth = 0;
         }
      
      out.write("\r\n");
      out.write("          </table></td>\r\n");
      out.write("      </tr>\r\n");
      out.write("    </table>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
